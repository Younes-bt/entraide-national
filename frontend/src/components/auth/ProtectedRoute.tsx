import { ReactNode } from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';

// Generated by Copilot
interface ProtectedRouteProps {
  children: ReactNode;
  allowedRoles?: string[];
}

const ProtectedRoute = ({ children, allowedRoles = [] }: ProtectedRouteProps) => {
  const { user, isAuthenticated } = useAuth();
  
  // Check if user is authenticated
  if (!isAuthenticated()) {
    // Redirect to login page if not authenticated
    return <Navigate to="/login" replace />;
  }
  
  // If allowedRoles array is empty, allow access to any authenticated user
  if (allowedRoles.length === 0 || !user) {
    return <>{children}</>;
  }
  
  // Check if user has the required role
  if (user && allowedRoles.includes(user.role)) {
    return <>{children}</>;
  }
  
  // If user doesn't have the required role, redirect them to their appropriate dashboard
  if (user) {
    switch (user.role) {
      case 'admin':
        return <Navigate to="/dashboard/admin" replace />;
      case 'center_supervisor':
        return <Navigate to="/dashboard/center" replace />;
      case 'association_supervisor':
        return <Navigate to="/dashboard/association" replace />;
      case 'trainer':
        return <Navigate to="/dashboard/trainer" replace />;
      case 'student':
        return <Navigate to="/dashboard/student" replace />;
      default:
        return <Navigate to="/" replace />;
    }
  }
  
  // Fallback to login page
  return <Navigate to="/login" replace />;
};

export default ProtectedRoute;