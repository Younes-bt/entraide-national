import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

// Interface for user data
interface User {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
}

// Interface for auth context data
interface AuthContextType {
  user: User | null;
  token: string | null;
  isLoading: boolean;
  error: string | null;
  login: (email: string, password: string) => Promise<any>;
  logout: () => void;
  isAuthenticated: () => boolean;
}

// Create the context with a default value
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Define props for provider component
interface AuthProviderProps {
  children: ReactNode;
}

// Generated by Copilot
export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(localStorage.getItem('authToken'));
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  // Check if token exists on component mount and fetch user data
  useEffect(() => {
    const fetchUserData = async () => {
      const storedToken = localStorage.getItem('authToken');
      
      if (storedToken) {
        setIsLoading(true);
        try {
          // Fetch user details from backend using the token
          const response = await fetch('http://localhost:8000/api/accounts/users/me/', {
            headers: {
              'Authorization': `Bearer ${storedToken}`
            }
          });

          if (!response.ok) {
            throw new Error('Failed to fetch user data');
          }

          const userData = await response.json();
          setUser(userData);
          setToken(storedToken);
        } catch (error) {
          console.error('Error fetching user data:', error);
          // If there's an error fetching user data, clear the token
          localStorage.removeItem('authToken');
          setToken(null);
          setUser(null);
        } finally {
          setIsLoading(false);
        }
      }
    };

    fetchUserData();
  }, []);

  // Login function
  const login = async (email: string, password: string) => {
    setIsLoading(true);
    setError(null);
    
    try {
      // Step 1: Get the JWT token
      const tokenResponse = await fetch('http://localhost:8000/api/token/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });
      
      if (!tokenResponse.ok) {
        throw new Error('Invalid email or password');
      }
      
      const tokenData = await tokenResponse.json();
      const accessToken = tokenData.access;
      
      // Store token in localStorage
      localStorage.setItem('authToken', accessToken);
      setToken(accessToken);
      
      // Step 2: Get the user data using the token
      const userResponse = await fetch('http://localhost:8000/api/accounts/users/me/', {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });

      if (!userResponse.ok) {
        throw new Error('Failed to fetch user data');
      }

      const userData = await userResponse.json();
      setUser(userData);
      
      return { user: userData, token: accessToken };
    } catch (error) {
      if (error instanceof Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      }
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  // Logout function
  const logout = () => {
    localStorage.removeItem('authToken');
    setToken(null);
    setUser(null);
  };

  // Check if user is authenticated
  const isAuthenticated = () => {
    return !!token;
  };

  // Context value
  const value = {
    user,
    token,
    isLoading,
    error,
    login,
    logout,
    isAuthenticated
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// Custom hook to use the auth context
export const useAuth = () => {
  const context = useContext(AuthContext);
  
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  
  return context;
};

export default AuthContext;